openapi: 3.0.0
info:
  title: Ray API
  description: API built to interact with the data layer needed for Ray's services
  version: 0.0.1
tags:
  - name: current
    description: Implemeneted
  - name: future
    description: To be implemented
servers:
  - url: http://192.168.0.12:8000
    description: Server when running on dell inspiron
  - url: http://192.168.0.38:8000
    description: Server when running on macbook 

paths:
  # ---- ECHO ----
  /echo/health:
    get:
      tags:
      - current
      summary: 'System Health Check'
      description: 'Idempotent request meant to check if system is online'
      responses:
        '200':
          description: 'Successful call to system'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              example: {
                statusCode: 200,
                type: "string",
                results: ["Healthy"]
              }
  # ---- CLOTHING ----
  /clothing/item/{item_id}:
    get:
      tags: 
      - future
      parameters: 
      - in: path
        name: item_id
        required: true
        schema:
          type: string
      responses:
        '200':
          description: 'Success: ClothingItem Response'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              example:
                statusCode: 200
                type: 'ClothingItem'
                results: 
                - id: 1
                  name: 'Life is good'
                  type: 3

  # # ---- FOOD ----
  /food/groceries:
    get:
      tags: 
      - future
      responses:
        '200':
          description: Groceries

  /food/recipes:
    get:
      tags:
      - future
      responses:
        '200':
          description: Recipes
  

  # ---- TODO ----
  /todo/calendar:
    get:
      tags: 
      - future
      responses:
        '200':
          description: Calendar info

  /todo/reminders:
    get:
      tags:
      - current
      responses:
        '200':
          description: Reminders
        '500':
          description: Internal Error
    post:
      description: NEEDS TO BE REDONE
      tags:
        - current
      responses:
        '201':
          description: Reminder Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StandardResponse'
              examples:
               Success:
                $ref: '#/components/examples/ReminderCreated'
  /todo/reminders/{reminder_id}:
    delete:
      tags:
      - current
      parameters:
        - in: path
          required: true
          name: reminder_id
          schema:
            type: string
      responses:
        '204':
          description: Reminder deleted
        '404':
          description: Reminder not found
        '500':
          description: Error deleting the item
    get:
      tags:
      - current
      parameters:
        - in: path
          required: true
          name: reminder_id
          schema:
            type: string
      responses:
        '200':
          description: Successful retrieval of reminder
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReminderItem'
        '404':
          description: Reminder not found
        '500':
          description: Error getting reminder
  /todo/chores:
    get:
        tags:
        - future
        responses:
          '200':
            description: Chores
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ChoreItem'
    post:
      description: "Create a new chore"
      tags:
        - future
      responses:
        '200':
          description: Chore Created
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 3
components:
  examples:
    ReminderCreated:
      value:
        statusCode: 201
        type: dict
        results:
        - id: 1
  schemas:
    StandardResponse:
      type: object
      properties:
        statusCode:
          type: integer
        results:
          type: array
          items:
            type: object
        type:
          type: string
      required: 
        - statusCode
          results
          type
    ChoreItem:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
    ReminderItem:
      type: object
      properties:
        id:
          type: integer
        text:
          type: string
        priority:
          type: integer
        time:
          type: string
          format: datetime
    ClothingItem:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
      required: 
        - id
          name
          type